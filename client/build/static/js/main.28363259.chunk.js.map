{"version":3,"sources":["tournament/lib/Player.ts","tournament/lib/Match.ts","tournament/lib/Tournament.ts","containers/RoundRobinTournament.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Player","name","wins","loses","points","this","Match","teams","local","visitor","result","gamesTeamOne","gamesTeamTwo","Tournament","players","schedule","Map","playersNames","key","push","forEach","player","addPlayer","has","Error","set","named","robin","getPlayersNames","length","map","round","roundWithMatches","r","getPlayers","team","firstPlayer","get","secondPlayer","shift","match","MatchCard","styled","div","Label","label","Input","input","Round","Li","li","Ul","ul","Subtle","span","RoundRobinTournament","React","useState","playerName","setPlayerName","tournamentName","setTournamentName","existsTournament","setExistsTournament","tournament","setTournament","setSchedule","numberOfPlayers","setNumberOfPlayers","onSubmit","e","preventDefault","value","onChange","target","type","autoFocus","renderPlayers","onClick","createRoundRobinLeague","console","log","style","color","roundNumber","fontWeight","getTeams","firstLocal","secondLocal","firstVisitor","secondVisitor","renderSchedule","App","className","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28363259.chunk.js","sourcesContent":["interface Results {\n  wins: number;\n  loses: number;\n  points: number;\n}\n\nclass Player {\n  private wins: number;\n  private loses: number;\n  private points: number;\n\n  constructor(public name: string) {\n    this.name = name;\n    this.wins = 0;\n    this.loses = 0;\n    this.points = 0;\n  }\n\n  static named(name: string): Player {\n    return new Player(name);\n  }\n\n  addScore() {}\n\n  getResults(): Results {\n    return {\n      wins: this.wins,\n      loses: this.loses,\n      points: this.points,\n    };\n  }\n}\n\nexport default Player;\n","import Player from './Player';\n\nexport interface Teams {\n  local: [Player, Player];\n  visitor: [Player, Player];\n}\n\nclass Match {\n  private local: [Player, Player];\n  private visitor: [Player, Player];\n  private result: [number | null, number | null];\n\n  constructor(teams: Teams) {\n    this.local = teams.local;\n    this.visitor = teams.visitor;\n    this.result = [null, null];\n  }\n\n  setGames(gamesTeamOne: number, gamesTeamTwo: number): void {\n    this.result = [gamesTeamOne, gamesTeamTwo];\n  }\n\n  getResult(): [number | null, number | null] {\n    return this.result;\n  }\n\n  getTeams(): Teams {\n    return {\n      local: this.local,\n      visitor: this.visitor,\n    };\n  }\n\n  getPlayers(): Player[] {\n    return [...this.local, ...this.visitor];\n  }\n}\n\nexport default Match;\n","import robin from 'roundrobin';\nimport Player from './Player';\nimport Match, { Teams } from './Match';\n// import Leaderboard from './Leaderboard';\n\nexport type Players = Map<string, Player>;\n\nclass Tournament {\n  static named(name: string) {\n    return new Tournament(name);\n  }\n\n  private players: Players;\n  public schedule: Match[][];\n\n  constructor(public name: string) {\n    this.name = name;\n    this.players = new Map();\n    this.schedule = [];\n  }\n\n  /**\n   * Public Method to Get all participating players\n   */\n  getPlayers(): Players {\n    return this.players;\n  }\n\n  getPlayersNames(): string[] {\n    let playersNames: string[] = [];\n    for (let [key, _] of this.players) {\n      playersNames.push(key);\n    }\n\n    return playersNames;\n  }\n\n  /**\n   * Public method to add players in batch\n   * @param players\n   */\n  addPlayers(players: string[]): void {\n    players.forEach((player) => this.addPlayer(player));\n  }\n\n  /**\n   * Public method to add one player to the tournament\n   * @param {Player} player\n   * @return {void}\n   */\n  addPlayer(player: string): void {\n    if (this.players.has(player)) {\n      new Error(`Player named ${player} already exists`);\n    }\n\n    this.players.set(player, Player.named(player));\n    return;\n  }\n\n  /**\n   * Create Round Robin League with this.players.\n   * Must exist a minimum of 8 players\n   */\n  createRoundRobinLeague(): Match[][] {\n    const rounds = robin(this.getPlayersNames().length, this.getPlayersNames());\n\n    const schedule = rounds.map((round: [string, string][]): Match[] => {\n      let roundWithMatches: Match[] = [];\n      let r = [...round];\n\n      function getPlayers(\n        players: Players,\n        team: [string, string]\n      ): [Player, Player] {\n        const firstPlayer = players.get(team[0]);\n        const secondPlayer = players.get(team[1]);\n        if (firstPlayer && secondPlayer) return [firstPlayer, secondPlayer];\n        else throw new Error('Not enough players!');\n      }\n\n      while (r.length) {\n        const local = r.shift();\n        const visitor = r.shift();\n\n        let teams: Teams;\n\n        if (local && visitor) {\n          teams = {\n            local: getPlayers(this.players, local),\n            visitor: getPlayers(this.players, visitor),\n          };\n          const match = new Match(teams);\n          roundWithMatches.push(match);\n        }\n      }\n\n      return roundWithMatches;\n    });\n\n    return schedule;\n\n    // const pairsOfPlayers = generatePairsOfPlayers(this.players);\n    // const matches = generateMatches(pairsOfPlayers);\n    // const schedule = generateSchedule(matches);\n    // this.schedule = [...schedule];\n    // return schedule\n  }\n}\n\nexport default Tournament;\n","import React from 'react';\nimport { Tournament, Player, Match } from '../tournament';\nimport styled from 'styled-components';\n\nconst MatchCard = styled.div`\n  padding: 15px;\n  margin-bottom: 10px;\n  width: 100%;\n  margin: 0 10px;\n  background-color: rgb(110, 156, 225, 0.3);\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n`;\n\nconst Input = styled.input`\n  padding: 10px 50px;\n`;\n\nconst Round = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-bottom: 50px;\n`;\n\nconst Li = styled.li`\n  text-decoration: none !important;\n  color: rgb(60, 107, 177);\n`;\n\nconst Ul = styled.ul`\n  columns: 2;\n  list-style: none;\n`;\n\nconst Subtle = styled.span`\n  color: grey;\n  font-size: 18px;\n`;\n\nfunction RoundRobinTournament() {\n  const [playerName, setPlayerName] = React.useState<string>('');\n  const [tournamentName, setTournamentName] = React.useState<string>('');\n  const [existsTournament, setExistsTournament] = React.useState<boolean>(\n    false\n  );\n  const [tournament, setTournament] = React.useState<Tournament>(null!);\n  const [schedule, setSchedule] = React.useState<Match[][]>(null!);\n  const [numberOfPlayers, setNumberOfPlayers] = React.useState<number>(0);\n\n  const renderPlayers = function () {\n    const players: Player[] = [];\n    if (tournament) {\n      for (let [_, player] of tournament.getPlayers()) {\n        players.push(player);\n      }\n    }\n\n    return players.map((player) => {\n      return <Li key={player.name}>{player.name}</Li>;\n    });\n  };\n\n  const renderSchedule = function () {\n    if (tournament && schedule) {\n      return schedule.map((round, roundNumber) => {\n        roundNumber = roundNumber + 1;\n\n        return (\n          <div key={`round-${roundNumber}`}>\n            <h1 style={{ fontWeight: 'bold' }}>Round {roundNumber}</h1>\n            <Round>\n              {round.map((match) => {\n                const { local, visitor } = match.getTeams();\n\n                const firstLocal = local[0].name;\n                const secondLocal = local[1].name;\n                const firstVisitor = visitor[0].name;\n                const secondVisitor = visitor[1].name;\n\n                return (\n                  <MatchCard\n                    key={`${firstLocal} ${secondLocal} ${firstVisitor} ${secondVisitor}`}\n                  >\n                    {firstLocal} <Subtle>&</Subtle> {secondLocal}\n                    <p style={{ fontWeight: 'bold' }}>VS</p>\n                    {firstVisitor} <Subtle>&</Subtle> {secondVisitor}\n                  </MatchCard>\n                );\n              })}\n            </Round>\n          </div>\n        );\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h1> {tournament?.name || 'Tournament Generator'}</h1>\n\n      {/* <button\n        onClick={() => {\n          const t = Tournament.named('Padeliers');\n          t?.addPlayer('1');\n          t?.addPlayer('2');\n          t?.addPlayer('3');\n          t?.addPlayer('4');\n          t?.addPlayer('5');\n          t?.addPlayer('6');\n          t?.addPlayer('7');\n          t?.addPlayer('8');\n          t?.addPlayer('9');\n          t?.addPlayer('10');\n          t?.addPlayer('11');\n          t?.addPlayer('12');\n          setExistsTournament(true);\n          t.createRoundRobinLeague();\n          setTournament(t);\n        }}\n      >\n        Auto-generate\n      </button> */}\n\n      {!existsTournament && (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            setTournament(Tournament.named(tournamentName));\n            setTournamentName('');\n            setExistsTournament(true);\n          }}\n        >\n          <Label>Tournament name</Label>\n          <Input\n            value={tournamentName}\n            onChange={(e) => setTournamentName(e.target.value)}\n            type='text'\n            autoFocus\n          />\n        </form>\n      )}\n      {existsTournament && (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            tournament?.addPlayer(playerName);\n            setPlayerName('');\n            setNumberOfPlayers(numberOfPlayers + 1);\n          }}\n        >\n          <Label>Player name</Label>\n          <Input\n            value={playerName}\n            onChange={(e) => setPlayerName(e.target.value)}\n            type='text'\n            autoFocus\n          />\n        </form>\n      )}\n\n      {existsTournament && (\n        <>\n          <h3>Players #{numberOfPlayers}</h3>\n          <Ul>{renderPlayers()}</Ul>\n        </>\n      )}\n\n      <br />\n      {existsTournament &&\n        tournament?.getPlayersNames() &&\n        tournament?.getPlayersNames().length > 0 && (\n          // tournament?.getPlayersNames().length % 4 === 0 &&\n          // tournament?.getPlayersNames().length < 12 &&\n          <>\n            <button\n              onClick={() => {\n                try {\n                  const schedule = tournament?.createRoundRobinLeague();\n                  setSchedule(schedule);\n                } catch (e) {\n                  console.log('Oops! There has been an error!');\n                }\n              }}\n            >\n              Generate Tournament!\n            </button>\n            <p style={{ color: 'grey' }}>\n              <i>\n                Enter Tournament Name and some <br /> Players before generating\n                tournament\n              </i>\n            </p>\n          </>\n        )}\n\n      {renderSchedule()}\n    </div>\n  );\n}\n\nexport default RoundRobinTournament;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RoundRobinTournament from './containers/RoundRobinTournament';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <RoundRobinTournament />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}